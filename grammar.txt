program:
        function(s)

function:
         |type| + identifier + ( + variable(s) + ) + '{' + statement(s) + '}'

statement:
            function_call
            identifier + '=' + expression + ';'
            'return' + expression + ';'
            'if' + condition + '{' + statement(s) + '}'
            'else' + 'if' + '(' + condition ')' + '{' + statement(s) + '}'
            'else'+ '{' + statement(s) + '}'
            'while' + condition + '{' + statement(s) + '}'
            'for' + '(' + variable + ';' + condition + ';' + UnOpNode + ')' + '{' + statement(s) + '}'

condition:
            expression + |conditionalOperation| + expression

expression:
            number
            string
            binOpNode
            UnOpNode
            function_call
            variable_access

variable:
          |type| + identifier + '=' + expression

function_call:
        identifier + '(' + variable(s) + ')'


binOpNode:
            number + |op| + number
            string + '+' + string

UnOpNode:
            |op| + number

number:
        int or float or double



int / 8-16-32-64bit
               8                  16                                  32                                                                   64
0 0 0 0 0 0 0 0 | 0 0 0 0 0 0 0 0 | 0 0 0 0 0 0 0 0 | 0 0 0 0 0 0 0 0 | 0 0 0 0 0 0 0 0 | 0 0 0 0 0 0 0 0 | 0 0 0 0 0 0 0 0 | 0 0 0 0 0 0 0 0

float / 32bit
sign  exponent                     fraction
0 | 0 0 0 0 0 0 0 0 | 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 |

double / 64bit
sign       exponent                                 fraction
0 | 0 0 0 0 0 0 0 0 0 0 0 | 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0